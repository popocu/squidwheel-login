buildscript {
    ext {
        springIOVersion = '1.0.0.RELEASE'
        springBootVersion = '3.0.10'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:${springIOVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.10'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.squidwheels'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

bootJar {
    version =  '0.0.1-SNAPSHOT'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

jar {
    version = '0.0.1-SNAPSHOT'
    manifest {
        attributes "Manifest-Version": 1.0,
                'Main-Class': 'com.squidwheels.login.LoginApplication'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}
dependencies {
    runtimeOnly fileTree('libs') { include '*.jar' }
}
dependencies {
    implementation ('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    // 引入 Undertow
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'javax.servlet:jstl:1.2'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
